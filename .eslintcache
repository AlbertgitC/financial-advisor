[{"/Users/albertcheng/workstuff/financial-advisor/src/index.js":"1","/Users/albertcheng/workstuff/financial-advisor/src/reportWebVitals.js":"2","/Users/albertcheng/workstuff/financial-advisor/src/App.js":"3","/Users/albertcheng/workstuff/financial-advisor/src/components/util/reducer.js":"4","/Users/albertcheng/workstuff/financial-advisor/src/components/util/actions.js":"5","/Users/albertcheng/workstuff/financial-advisor/src/components/donutGraph.js":"6","/Users/albertcheng/workstuff/financial-advisor/src/components/calInvest.js":"7","/Users/albertcheng/workstuff/financial-advisor/src/components/riskForm.js":"8","/Users/albertcheng/workstuff/financial-advisor/src/components/util/createChart.js":"9","/Users/albertcheng/workstuff/financial-advisor/src/components/util/calculationAlgo.js":"10"},{"size":805,"mtime":1611350390030,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1611104805426,"results":"13","hashOfConfig":"12"},{"size":629,"mtime":1611350774310,"results":"14","hashOfConfig":"12"},{"size":1368,"mtime":1611349588794,"results":"15","hashOfConfig":"12"},{"size":172,"mtime":1611296951118,"results":"16","hashOfConfig":"12"},{"size":3924,"mtime":1611349588793,"results":"17","hashOfConfig":"12"},{"size":5650,"mtime":1611349588793,"results":"18","hashOfConfig":"12"},{"size":4188,"mtime":1611349588793,"results":"19","hashOfConfig":"12"},{"size":3000,"mtime":1611349588794,"results":"20","hashOfConfig":"12"},{"size":2474,"mtime":1611349588794,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tosnou",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/albertcheng/workstuff/financial-advisor/src/index.js",[],"/Users/albertcheng/workstuff/financial-advisor/src/reportWebVitals.js",[],["46","47"],"/Users/albertcheng/workstuff/financial-advisor/src/App.js",[],"/Users/albertcheng/workstuff/financial-advisor/src/components/util/reducer.js",[],"/Users/albertcheng/workstuff/financial-advisor/src/components/util/actions.js",[],"/Users/albertcheng/workstuff/financial-advisor/src/components/donutGraph.js",["48","49"],"import './donutGraph.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport Chart from 'chart.js';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport * as Actions from './util/actions';\nimport CalInvest from './calInvest';\n\nfunction DonutGraph(props) {\n    const globalState = useSelector(state => state);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        let level = document.getElementById(globalState.risk);\n        selectLevel(level);\n    }, [])\n\n    function renderChart(data) {\n        const ctx = document.getElementById(\"donut-chart\").getContext(\"2d\");\n        const configChart = {\n            type: \"doughnut\",\n            data: {\n                labels: [\"Bonds\", \"Large Cap\", \"Mid Cap\", \"Foreign\", \"Small Cap\"],\n                datasets: [{\n                    data: data,\n                    backgroundColor: [\n                        \"#EF4F4F\",\n                        \"#EE9595\",\n                        \"#F58634\",\n                        \"#007965\",\n                        \"#00587A\"\n                    ],\n                    borderColor: \"#000000\"\n                }]\n            },\n            options: {\n                hover: false,\n                tooltips: false,\n                legend: {\n                    labels: {\n                        fontColor: \"#FFFFFF\",\n                        fontSize: 15\n                    }\n                },\n                animation: {\n                    duration: 1300\n                },\n                plugins: {\n                    datalabels: {\n                        display: function (context) {\n                            let index = context.dataIndex;\n                            let value = context.dataset.data[index];\n                            if (value) return true;\n                            return false;\n                        },\n                        formatter: function (value, context) {\n                            if (value) {\n                                return (\n                                    context.chart.data.labels[context.dataIndex] + \"\\n\" + (value * 100) + \"%\"\n                                );\n                            };\n                        },\n                        color: \"#ffffff\",\n                        font: {\n                            size: \"22\",\n                            weight: \"600\"\n                        }\n                    }\n                }\n            }\n        };\n        const donutChart = new Chart(ctx, configChart);\n    };\n\n    function selectLevel(target) {\n        let clicked = document.getElementsByClassName(\"clicked\")[0];\n        if (clicked) clicked.classList.remove(\"clicked\");\n        target.classList.add(\"clicked\");\n        dispatch(Actions.changeRisk(target.id));\n        renderChart(Object.values(globalState.riskChart[target.id]));\n    };\n\n    function handleClick(e) {\n        selectLevel(e.target);\n    };\n\n    function buttonClick() {\n        props.setComponent({ component: <CalInvest setComponent={props.setComponent}/> });\n    };\n\n    return (\n        <div className=\"donut-container\">\n            <p>Please Select A Risk Level For Your Investment Portfolio</p>\n            <div className=\"risk-indicator\">\n                <p>Low</p>\n                <p>High</p>\n            </div>\n            <div className=\"risk-levels\">\n                <div className=\"level\" id=\"1\" onClick={handleClick}>1</div>\n                <div className=\"level\" id=\"2\" onClick={handleClick}>2</div>\n                <div className=\"level\" id=\"3\" onClick={handleClick}>3</div>\n                <div className=\"level\" id=\"4\" onClick={handleClick}>4</div>\n                <div className=\"level\" id=\"5\" onClick={handleClick}>5</div>\n                <div className=\"level\" id=\"6\" onClick={handleClick}>6</div>\n                <div className=\"level\" id=\"7\" onClick={handleClick}>7</div>\n                <div className=\"level\" id=\"8\" onClick={handleClick}>8</div>\n                <div className=\"level\" id=\"9\" onClick={handleClick}>9</div>\n                <div className=\"level\" id=\"10\" onClick={handleClick}>10</div>\n            </div>\n            <div className=\"chart-container\">\n                <canvas id=\"donut-chart\"></canvas>\n            </div>\n            <div className=\"inv-portfolio\">\n                <div>INVESTMENT</div>\n                <div>PORTFOLIO</div>\n            </div>\n            <div>\n                <button onClick={buttonClick}>Calculate Your Investment</button>\n            </div>\n        </div>\n    );\n}\n\nexport default DonutGraph;","/Users/albertcheng/workstuff/financial-advisor/src/components/calInvest.js",["50"],"import { useSelector, useDispatch } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport DonutGraph from './donutGraph';\nimport * as Actions from './util/actions';\nimport RiskForm from './riskForm';\nimport './calInvest.css';\n\nfunction CalInvest(props) {\n    const globalState = useSelector(state => state);\n    const dispatch = useDispatch();\n    const defaultState = {\n        investment: { \"Bonds\": 0, \"Large Cap\": 0, \"Mid Cap\": 0, \"Foreign\": 0, \"Small Cap\": 0 },\n        diff: [0, 0, 0, 0, 0],\n        endAmount: [0, 0, 0, 0, 0],\n        transactions: [],\n        error: \"\"\n    };\n    const [localState, setState] = useState(defaultState);\n\n    useEffect(() => {\n        setState(s => ({\n            ...s, investment: globalState.investment\n        }));\n    }, [])\n\n    function changeComponent() {\n        props.setComponent({\n            component: <DonutGraph setComponent={props.setComponent} />\n        });\n    };\n\n    function handleMoneyInput(e) {\n        dispatch(Actions.changeInvest({ [e.target.name]: e.target.value }));\n        setState({ ...localState, investment: { ...localState.investment, [e.target.name]: e.target.value } });\n    };\n\n    function handleSubmit() {\n        let startAmount = Object.values(localState.investment);\n        for (let i = 0; i < startAmount.length; i++) {\n            if (isNaN(startAmount[i])) {\n                setState({ ...localState, error: \"Please enter number only\" });\n                return;\n            } else {\n                let num;\n                if (startAmount[i] === \"\") {\n                    num = 0;\n                } else {\n                    num = parseFloat(startAmount[i]);\n                };\n                startAmount.splice(i, 1, num);\n            };\n        };\n        \n        let endAmount = calEndAmount(startAmount);\n        let diff = calDiff(startAmount, endAmount);\n\n        setState({\n            ...localState,\n            diff: toFixTwo(diff),\n            endAmount: toFixTwo(endAmount),\n            transactions: calTrans(diff),\n            error: \"\"\n        });\n\n        function calEndAmount(amount) {\n            let total = amount.reduce((accumulator, currentValue) => accumulator + currentValue);\n            let endAmount = [];\n            let percent = Object.values(globalState.riskChart[globalState.risk]);\n            for (let val of percent) {\n                endAmount.push(total * val);\n            };\n            return endAmount;\n        };\n\n        function calDiff(startAmount, endAmount) {\n            let diff = [];\n            for (let i = 0; i < startAmount.length; i++) {\n                diff.push(endAmount[i] - startAmount[i]);\n            };\n            return diff;\n        };\n\n        function toFixTwo(amount) {\n            let newAmount = amount.map(val => (\n                (Math.round(val * 100) / 100).toFixed(2)\n            ));\n            return newAmount;\n        };\n\n        function calTrans(arr) {\n            let diff = arr.slice(0);\n            let trans = [];\n            let done = false;\n            \n            for (let i = 0; i < diff.length - 1; i++) {\n                if (diff[i] === 0) continue;\n                for (let j = i + 1; j < diff.length; j++) {\n                    if (diff[j] === 0) continue;\n                    if (diff[i] + diff[j] === 0) {\n                        let negativeIdx = diff[i] < 0 ? i : j;\n                        let positiveIdx = negativeIdx === i ? j : i;\n                        let amount = (Math.round(diff[positiveIdx] * 100) / 100).toFixed(2);\n                        trans.push([negativeIdx, positiveIdx, amount]);\n                        diff.splice(i, 1, 0);\n                        diff.splice(j, 1, 0);\n                    };\n                };\n            };\n\n            while (!done) {\n                done = true;\n                for (let i = 0; i < diff.length - 1; i++) {\n                    if (diff[i] === 0) continue;\n                    for (let j = i + 1; j < diff.length; j++) {\n                        if (diff[j] === 0 || diff[i] === 0) {\n                            continue;\n                        } else if (diff[i] > 0 && diff[j] > 0) {\n                            continue;\n                        } else if (diff[i] < 0 && diff[j] < 0) {\n                            continue;\n                        };\n                        done = false;\n                        let negativeIdx = diff[i] < 0 ? i : j;\n                        let positiveIdx = negativeIdx === i ? j : i;\n                        let sum = diff[i] + diff[j];\n                        if (sum > 0) {\n                            let amount = (Math.round(-diff[negativeIdx] * 100) / 100).toFixed(2);\n                            trans.push([negativeIdx, positiveIdx, amount]);\n                            diff.splice(negativeIdx, 1, 0);\n                            diff.splice(positiveIdx, 1, sum);\n                        } else {\n                            let amount = (Math.round(diff[positiveIdx] * 100) / 100).toFixed(2);\n                            trans.push([negativeIdx, positiveIdx, amount]);\n                            diff.splice(negativeIdx, 1, sum);\n                            diff.splice(positiveIdx, 1, 0);\n                        };\n                    };\n                };\n            };\n            return trans;\n        };\n    }\n\n    return (\n        <div className=\"cal-invest-container\">\n            <div className=\"risk-level-container\">\n                <p>Risk Level {globalState.risk}: \n                    Bonds {globalState.riskChart[globalState.risk].bonds * 100}% | \n                    Large Cap {globalState.riskChart[globalState.risk].largeCap * 100}% |\n                    Mid Cap {globalState.riskChart[globalState.risk].midCap * 100}% |\n                    Foreign {globalState.riskChart[globalState.risk].foreign * 100}% |\n                    Small Cap {globalState.riskChart[globalState.risk].smallCap * 100}%\n                </p>\n                <RiskForm />\n                <button onClick={changeComponent}>Back to Risk Chart</button>\n            </div>\n            <div className=\"cal-container\">\n                <h3>Please Enter Your Current Portfolio</h3>\n                <form>\n                    {Object.keys(globalState.investment).map((type, i) => {\n                        return (\n                            <div key={i} className=\"amount-input\">\n                                <label>{type}</label>\n                                <input\n                                    name={type}\n                                    value={localState.investment[type]}\n                                    onChange={handleMoneyInput}\n                                ></input>\n                            </div>\n                        );\n                    })}\n                </form>\n                <div className=\"result\">\n                    <div className=\"diff\">\n                        <p>Difference</p>\n                        <ul className=\"diff-ul\">\n                            {localState.diff.map((val, i) => <li key={i}>\n                                {val}\n                            </li>)}\n                        </ul>\n                    </div>\n                    <div className=\"end-total\">\n                        <p>New Amount</p>\n                        <ul className=\"end-total-ul\">\n                            {localState.endAmount.map((val, i) => <li key={i}>\n                                {val}\n                            </li>)}\n                        </ul>\n                    </div>\n                    <div className=\"transactions\">\n                        <p>Recommended Transfers</p>\n                        <ul className=\"transactions-ul\">\n                            {\n                                localState.transactions.length === 0 ? null :\n                                    localState.transactions.map((transaction, i) => {\n                                        let types = Object.keys(localState.investment);\n                                        return <li key={i}>\n                                            - Transfer ${transaction[2]} from {types[transaction[0]]} to {types[transaction[1]]}.\n                                        </li>\n                                    })\n                            }\n                        </ul>\n                    </div>\n                </div>\n                <button className=\"rebalance-button\" onClick={handleSubmit}>Rebalance</button>\n                <p>{localState.error}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default CalInvest;","/Users/albertcheng/workstuff/financial-advisor/src/components/riskForm.js",[],"/Users/albertcheng/workstuff/financial-advisor/src/components/util/createChart.js",["51"],"import Chart from 'chart.js';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\n\nChart.pluginService.register({\n    beforeDraw: function (chart) {\n        const width = chart.chart.width,\n            height = chart.chart.height,\n            ctx = chart.chart.ctx;\n\n        ctx.restore();\n        const fontSize = (height / 320).toFixed(2);\n        ctx.font = fontSize + \"em sans-serif\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"#00CED1\";\n\n        const legendHeight = chart.legend.height;\n        const text1 = \"INVESTMENT\",\n            textX = Math.round((width - ctx.measureText(text1).width) / 2),\n            textY = height / 2 + legendHeight / 2 - fontSize * 10,\n            text2 = \"PORTFOLIO\",\n            text2X = Math.round((width - ctx.measureText(text2).width) / 2),\n            text2Y = height / 2 + legendHeight / 2 + fontSize * 10;\n\n        ctx.fillText(text1, textX, textY);\n        ctx.fillText(text2, text2X, text2Y);\n        ctx.save();\n    }\n});\n\nfunction createChart(chartRef, data) {\n    const ctx = chartRef.current.getContext(\"2d\");\n    const configChart = {\n        type: \"doughnut\",\n        data: {\n            labels: [\"Bonds\", \"Large Cap\", \"Mid Cap\", \"Foreign\", \"Small Cap\"],\n            datasets: [{\n                data: data,\n                backgroundColor: [\n                    \"#EF4F4F\",\n                    \"#EE9595\",\n                    \"#F58634\",\n                    \"#007965\",\n                    \"#00587A\"\n                ],\n                borderColor: \"#000000\"\n            }]\n        },\n        options: {\n            hover: false,\n            tooltips: false,\n            legend: {\n                display: false,\n                labels: {\n                    fontColor: \"#FFFFFF\",\n                    fontSize: 15\n                }\n            },\n            centertext: {\n                display: true,\n                text: \"Testing\",\n                subText: \"sub text\"\n            },\n            animation: {\n                duration: 1300\n            },\n            plugins: {\n                datalabels: {\n                    display: function (context) {\n                        let index = context.dataIndex;\n                        let value = context.dataset.data[index];\n                        if (value) return true;\n                        return false;\n                    },\n                    formatter: function (value, context) {\n                        if (value) {\n                            return (\n                                context.chart.data.labels[context.dataIndex] + \"\\n\" + (value * 100) + \"%\"\n                            );\n                        };\n                    },\n                    color: \"#ffffff\",\n                    font: {\n                        size: \"16\",\n                        weight: \"600\"\n                    }\n                }\n            }\n        }\n    };\n    const donutChart = new Chart(ctx, configChart);\n    return donutChart;\n};\n\nexport default createChart;","/Users/albertcheng/workstuff/financial-advisor/src/components/util/calculationAlgo.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":21,"column":8,"nodeType":"58","endLine":21,"endColumn":10,"suggestions":"59"},{"ruleId":"56","severity":1,"message":"60","line":25,"column":8,"nodeType":"58","endLine":25,"endColumn":19,"suggestions":"61"},{"ruleId":"56","severity":1,"message":"62","line":25,"column":8,"nodeType":"58","endLine":25,"endColumn":10,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":2,"column":8,"nodeType":"66","messageId":"67","endLine":2,"endColumn":23},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dataState', 'globalState.risk', and 'globalState.riskChart'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setChart' needs the current value of 'dataState'.","ArrayExpression",["70"],"React Hook useEffect has missing dependencies: 'donutChart' and 'updateChart'. Either include them or remove the dependency array.",["71"],"React Hook useEffect has a missing dependency: 'globalState.investment'. Either include it or remove the dependency array.",["72"],"no-unused-vars","'ChartDataLabels' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [dataState, globalState.risk, globalState.riskChart]",{"range":"79","text":"80"},"Update the dependencies array to be: [dataState, donutChart, updateChart]",{"range":"81","text":"82"},"Update the dependencies array to be: [globalState.investment]",{"range":"83","text":"84"},[784,786],"[dataState, globalState.risk, globalState.riskChart]",[868,879],"[dataState, donutChart, updateChart]",[832,834],"[globalState.investment]"]